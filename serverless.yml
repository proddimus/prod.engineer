# Welcome to serverless. Read the docs
# https://serverless.com/framework/docs/

# Serverless.yml is the configuration the CLI
# uses to deploy your code to your provider of choice

# The `service` block is the name of the service
service: prod

custom:
  siteName: ${file(./config-${self:provider.stage}.yaml):url}
  s3Sync:
    - bucketName: ${self:custom.siteName}
      localDir: static

# The `provider` block defines where your service will be deployed
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'prod'}
  deploymentBucket:
    name: com.serverless.eu-west-2.dep.archive
  region: eu-west-2
  stackTags: # Optional CF stack tags
    site: prod.engineering

# The `functions` block defines what code to deploy
functions:
  helloWorld:
    handler: handler.helloWorld
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: hello-world
          method: get
          cors: true
          authorizerFunc: custom_authorizer
  authorizerFunc:
    handler: handler.customAuthorizer
  callback:
    handler: handler.callback
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: callback
          method: get
          cors: true
  redirect:
    handler: handler.redirect
    # The `events` block defines how to trigger the handler.helloWorld code
    events:
      - http:
          path: redirect
          method: get
          cors: true

plugins:
  - serverless-s3-sync

resources:
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: WebsiteBucket
        PolicyDocument:
          Statement:
            -
              Action:
                - "s3:GetObject"
              Effect: Allow
              Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { Ref: WebsiteBucket }, "/*"]] }
              Principal:
                AWS: { "Fn::Join" : [" ", ["arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: WebsiteOriginAccessIdentity } ] ] }
    WebsiteOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "Origin Access Identity"
    WebsiteDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.siteName}
          DefaultCacheBehavior:
            TargetOriginId: 'WebsiteBucketOrigin'
            ViewerProtocolPolicy: 'redirect-to-https'
            DefaultTTL: 600 # ten minutes
            MaxTTL: 600 # ten minutes
            Compress: true
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: 'none'
          CacheBehaviors:
            -
              TargetOriginId: 'WebsiteBucketOrigin'
              PathPattern: '*'
              ViewerProtocolPolicy: 'redirect-to-https'
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: 'none'
              DefaultTTL: 0
              MaxTTL: 0
          DefaultRootObject: 'index.html'
          Enabled: true
          PriceClass: 'PriceClass_100'
          HttpVersion: 'http2' 
          ViewerCertificate:
            SslSupportMethod: "sni-only"
            AcmCertificateArn: ${ssm:prod-engineering-base-cert}
          Origins:
            -
              Id: 'WebsiteBucketOrigin'
              DomainName: { 'Fn::GetAtt': [ 'WebsiteBucket', 'DomainName' ] }
              S3OriginConfig:
                OriginAccessIdentity: { "Fn::Join": ["", ["origin-access-identity/cloudfront/", { Ref: WebsiteOriginAccessIdentity } ] ] }
